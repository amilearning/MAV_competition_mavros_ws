// Generated by gencpp from file planner_msgs/PlannerLogger.msg
// DO NOT EDIT!


#ifndef PLANNER_MSGS_MESSAGE_PLANNERLOGGER_H
#define PLANNER_MSGS_MESSAGE_PLANNERLOGGER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace planner_msgs
{
template <class ContainerAllocator>
struct PlannerLogger_
{
  typedef PlannerLogger_<ContainerAllocator> Type;

  PlannerLogger_()
    : header()
    , graph_build_time(0.0)
    , exp_gain_time(0.0)
    , total_time(0.0)
    , path_length(0.0)
    , find_frontier(0.0)
    , time_search_path_to_frontier(0.0)
    , map_resolution(0.0)
    , number_free_voxels(0)
    , number_occupied_voxels(0)  {
    }
  PlannerLogger_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , graph_build_time(0.0)
    , exp_gain_time(0.0)
    , total_time(0.0)
    , path_length(0.0)
    , find_frontier(0.0)
    , time_search_path_to_frontier(0.0)
    , map_resolution(0.0)
    , number_free_voxels(0)
    , number_occupied_voxels(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _graph_build_time_type;
  _graph_build_time_type graph_build_time;

   typedef float _exp_gain_time_type;
  _exp_gain_time_type exp_gain_time;

   typedef float _total_time_type;
  _total_time_type total_time;

   typedef float _path_length_type;
  _path_length_type path_length;

   typedef float _find_frontier_type;
  _find_frontier_type find_frontier;

   typedef float _time_search_path_to_frontier_type;
  _time_search_path_to_frontier_type time_search_path_to_frontier;

   typedef float _map_resolution_type;
  _map_resolution_type map_resolution;

   typedef int32_t _number_free_voxels_type;
  _number_free_voxels_type number_free_voxels;

   typedef int32_t _number_occupied_voxels_type;
  _number_occupied_voxels_type number_occupied_voxels;





  typedef boost::shared_ptr< ::planner_msgs::PlannerLogger_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planner_msgs::PlannerLogger_<ContainerAllocator> const> ConstPtr;

}; // struct PlannerLogger_

typedef ::planner_msgs::PlannerLogger_<std::allocator<void> > PlannerLogger;

typedef boost::shared_ptr< ::planner_msgs::PlannerLogger > PlannerLoggerPtr;
typedef boost::shared_ptr< ::planner_msgs::PlannerLogger const> PlannerLoggerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planner_msgs::PlannerLogger_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planner_msgs::PlannerLogger_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::planner_msgs::PlannerLogger_<ContainerAllocator1> & lhs, const ::planner_msgs::PlannerLogger_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.graph_build_time == rhs.graph_build_time &&
    lhs.exp_gain_time == rhs.exp_gain_time &&
    lhs.total_time == rhs.total_time &&
    lhs.path_length == rhs.path_length &&
    lhs.find_frontier == rhs.find_frontier &&
    lhs.time_search_path_to_frontier == rhs.time_search_path_to_frontier &&
    lhs.map_resolution == rhs.map_resolution &&
    lhs.number_free_voxels == rhs.number_free_voxels &&
    lhs.number_occupied_voxels == rhs.number_occupied_voxels;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::planner_msgs::PlannerLogger_<ContainerAllocator1> & lhs, const ::planner_msgs::PlannerLogger_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace planner_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::planner_msgs::PlannerLogger_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner_msgs::PlannerLogger_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planner_msgs::PlannerLogger_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planner_msgs::PlannerLogger_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner_msgs::PlannerLogger_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner_msgs::PlannerLogger_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planner_msgs::PlannerLogger_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b8d38f1917746aa79f659b85baf83236";
  }

  static const char* value(const ::planner_msgs::PlannerLogger_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb8d38f1917746aa7ULL;
  static const uint64_t static_value2 = 0x9f659b85baf83236ULL;
};

template<class ContainerAllocator>
struct DataType< ::planner_msgs::PlannerLogger_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planner_msgs/PlannerLogger";
  }

  static const char* value(const ::planner_msgs::PlannerLogger_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planner_msgs::PlannerLogger_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"float32 graph_build_time\n"
"float32 exp_gain_time\n"
"float32 total_time\n"
"float32 path_length\n"
"\n"
"float32 find_frontier\n"
"float32 time_search_path_to_frontier\n"
"\n"
"float32 map_resolution\n"
"int32 number_free_voxels\n"
"int32 number_occupied_voxels\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::planner_msgs::PlannerLogger_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planner_msgs::PlannerLogger_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.graph_build_time);
      stream.next(m.exp_gain_time);
      stream.next(m.total_time);
      stream.next(m.path_length);
      stream.next(m.find_frontier);
      stream.next(m.time_search_path_to_frontier);
      stream.next(m.map_resolution);
      stream.next(m.number_free_voxels);
      stream.next(m.number_occupied_voxels);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlannerLogger_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planner_msgs::PlannerLogger_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planner_msgs::PlannerLogger_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "graph_build_time: ";
    Printer<float>::stream(s, indent + "  ", v.graph_build_time);
    s << indent << "exp_gain_time: ";
    Printer<float>::stream(s, indent + "  ", v.exp_gain_time);
    s << indent << "total_time: ";
    Printer<float>::stream(s, indent + "  ", v.total_time);
    s << indent << "path_length: ";
    Printer<float>::stream(s, indent + "  ", v.path_length);
    s << indent << "find_frontier: ";
    Printer<float>::stream(s, indent + "  ", v.find_frontier);
    s << indent << "time_search_path_to_frontier: ";
    Printer<float>::stream(s, indent + "  ", v.time_search_path_to_frontier);
    s << indent << "map_resolution: ";
    Printer<float>::stream(s, indent + "  ", v.map_resolution);
    s << indent << "number_free_voxels: ";
    Printer<int32_t>::stream(s, indent + "  ", v.number_free_voxels);
    s << indent << "number_occupied_voxels: ";
    Printer<int32_t>::stream(s, indent + "  ", v.number_occupied_voxels);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNER_MSGS_MESSAGE_PLANNERLOGGER_H
